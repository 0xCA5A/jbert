plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "java"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "nebula.ospackage" version "4.8.0"
    id "org.openapi.generator" version "4.2.3"
}

apply plugin: 'nebula.deb'

description "jbert control application"
version "0.3.0"
group "ch.jbert"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    // Micronaut generated dependencies
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compileOnly "org.graalvm.nativeimage:svm"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"

    implementation "io.swagger:swagger-annotations:1.6.0"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "io.gsonfire:gson-fire:1.8.3"

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    // Sub-Project dependencies
    compile project(':core')
}

test.classpath += configurations.developmentOnly

mainClassName = "ch.jbert.Application"

test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify",
        "-XX:TieredStopAtLevel=1",
        "-Dcom.sun.management.jmxremote",
        "-Dcom.sun.management.jmxremote.port=7777",
        "-Dcom.sun.management.jmxremote.local.only=false",
        "-Dcom.sun.management.jmxremote.authenticate=false",
        "-Dcom.sun.management.jmxremote.ssl=false")

sourceSets {
    generated {
        java.srcDir "${buildDir}/generated/src"
        compileClasspath = configurations.compileClasspath
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }

    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
    options.compilerArgs.add("-deprecation")
    options.compilerArgs.add("-Werror")
}

task jbertDebPackage(type: Deb) {
    maintainer "samuelcasa9@gmail.com"
    user "jbert"
    permissionGroup "users"
    preDepends "openjdk-8-jre-headless"

    into '/usr/share/jbert'

    from('build/libs') {
        into 'lib'
    }
    from('build/scriptsShadow') {
        into 'bin'
        exclude '*.bat'
        fileMode 0550
    }
    from('systemd') {
        into 'bin'
    }
    from('src/main/resources') {
        fileType CONFIG | NOREPLACE
        into 'conf'
    }

    link('/lib/systemd/system/jbert.service', '/usr/share/jbert/bin/jbert.service')
    link('/etc/default/jbert', '/usr/share/jbert/bin/environment')
}

def openApiSpec = "$rootDir/src/main/resources/openapi.yaml"

openApiValidate {
    inputSpec = openApiSpec
}

task buildApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    validateSpec = true
    generatorName = "java"
    inputSpec = openApiSpec
    outputDir = "$buildDir/generated"
    apiPackage = "ch.jbert.api"
    modelPackage = "ch.jbert.model"
    generateModelTests = false
    generateApiTests = false
    configOptions = [
            serializationLibrary: "gson",
            dateLibrary         : "java8",
    ]
}
compileJava.dependsOn tasks.buildApi
